name: GetFront RN SDK Testing Pipeline 🧪

on: [push]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  NODE_VERSION: '16'
  NODE_OPTIONS: '--max_old_space_size=4096'

jobs:
  analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set image version
        run: echo "ImageVersion=$ImageVersion" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Node cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-${{ env.ImageVersion }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.ImageVersion }}-node-

      - name: Install node modules
        run: yarn install --frozen-lockfile

      - name: Run type check
        run: yarn types-check

      - name: Run linter
        run: yarn lint

      #      - name: Check for unused dependencies
      #        shell: bash {0}
      #        run: |
      #          dependencies=$(npx -q depcheck --skip-missing)
      #          echo "$dependencies"
      #          ! echo "$dependencies" | grep -q "Unused dependencies" && (echo "OK: no unused dependencies found") || (echo "FAIL: unused dependencies found"; exit 1)

      - name: Check for strict licenses
        shell: bash {0}
        run: |
          licenses=$(npx -q tldrlegal)
          echo "$licenses"
          declare -a strict=("Must Give Credit"  "Must Disclose Source"  "Must Include Original")
          for license in "${strict[@]}"; do echo "$licenses" | grep "$license" | grep -Eoq " 0 " && (echo "OK: $license") || (echo "FAIL: $license"; exit 1); done

      - name: Check for circular dependencies
        run: npx madge --circular --no-spinner src/

      # TODO uncomment.
      # - name: Check for credential leaks
      #   if: github.event_name == 'pull_request'
      #   uses: zricethezav/gitleaks-action@v1.4.0
      #   with:
      #     config-path: .gitleaks.toml

  unit-tests:
    runs-on: ${{ matrix.os }}
    needs:
      - analysis
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [ 16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }} 🔂
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies 📦
        run: yarn install --frozen-lockfile --silent

      - name: Run unit tests ⚛️
        run: yarn test

  check-build: # check build with all the supported node versions and OSes (TODO: extend this to include more typescript/react/react-native versions)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        node-version: [ 16.x, 18.x, 20.x ]
    needs:
      - unit-tests
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }} 🔂
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies 📦
        run: yarn install --frozen-lockfile --silent

      - name: Build package 📦
        run: yarn build

      - name: Check build 🕵️‍♂️
        run: yarn check-build

